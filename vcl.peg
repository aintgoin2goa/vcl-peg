{
	const util = require('util');

	function isConcat(str){
		if(str.length === 1) return str[0][0];

		return ['StringConcatenation', str.map(s => s[0])];
	}

	function isArray(val){
		return val instanceof Array || typeof val === 'object' && val !== null && val.push && val.pop;
	}

	function log(val){
		console.log(util.inspect(val, {depth:null}));
		return val;
	}

	function clean(arr){
		console.log('CLEAN', arr);
		if(isArray(arr)){
			let result;
			if(!arr.length) return false;

			return arr.filter(a => {
				if(isArray(a)){
					return clean(a);
				}

				return !!a;
			});
		}else{
			return !!arr;
		}
	}


	function logEach(val){
		for(let v of val){
			log('====');
			log(val);
		}
		return val;
	}
}

start
  = block:(Block _ )+ {return block.map(e => e[0]); }

Block
  =  (BackendDefinition / Comment / Subroutine / Conditional )


/* ================ BLOCKS ==================== */

Subroutine "function"
  = _ "sub" _ name:Identifier _ "{" _ lines:Line*  _ "}" { return [name[1], lines[0]]; }

BackendDefinition "backend"
 = "backend" _ name:Identifier _ props:BackendPropertyList { return ['Backend', {name:name[1], properties:props}] }

BackendPropertyList "backend property list"
 = "{" _ props:((SetBackendProperty / HealthCheck / Comment) _)+ "}" { return props.map(p => p[0]) }

HealthCheck "healthcheck"
  = _ ".probe" _ "=" _ propList:BackendPropertyList {return ['Healthcheck', propList];}

Comment "Comment"
  = _ "#" c:[^\n]+ { return ['Comment', c.join('')]; }

/* =============== STATEMENTS ================== */

Line "Line"
  = __ statements:(__ Statement __)* __ ";" {return clean(statements[0]); }

Statement "Statement"
  = statement:(GetHttpHeader / SetHttpHeader / GetProperty / SetProperty)

GetHttpHeader "Get HTTP Header"
  = header:HttpHeader

SetHttpHeader "Set HTTP Header"
  = "set" _ left:HttpHeader _ "=" _ right:(HttpHeader / String) {return ['SetHttpHeader', {name:left, value:right}]; }

GetProperty "Get Property"
  = obj:AvailableObjects "." prop:Identifier { return ['GetProperty', {object:obj, name:prop[1]}];}

SetProperty
  = "set" _ obj:AvailableObjects "." prop:Identifier _ "=" _ val:(HttpHeader / Identifier / Literal) { return ['SetProperty', {object:obj, name:prop[1], value:val}];}

SetBackendProperty "SET backend property"
 = left:BackendPropertyName _ "=" _ right:Literal ";" {return ['SetBackendProperty', {name:left, value:right}]; }

BackendPropertyName "backend property name"
  = name:("." Identifier) {return name[1].join('')}


/* ============== COMPARISONS =================== */


Conditional "Conditional Expression"
  = "("? _  expr:((BooleanTest _ BooleanOperator _ BooleanTest)) _  ")"? {return ['ConditionalExpression', clean(expr)]; }

BooleanOperator "BooleanOperator"
  = operator:("&&" / "||") {return ['BooleanOperator', operator]; }

BooleanTest "Boolean Test"
  = "("? _  left:(Identifier / Literal) _ operator:("==" / "!=" / "~") _ right:(Identifier / Literal) _ ")"? {return ['BooleanTest', {left:left, right:right, operator:operator}]; }


/* ============= IDENTIFIERS =================== */

Identifier "identifier"
  = i:([a-zA-Z0-9] / "-" / "_" / ".")+ {return ['Identifier', i.join('')]; }

HttpHeader "HTTP Header"
  = obj:AvailableObjects ".http." name:HttpHeaderName {return ['HttpHeader', {obj:obj, name:name}]; }

AvailableObjects "Available Objects"
  = ("req" / "resp" / "obj" / "beresp")

HttpHeaderName "HTTP Header"
  = i:([a-zA-Z0-9] / "-" )+ { return i.join(''); }

/* =========== LITERALS ================= */

Literal "literal"
  = value:(Duration / Integer / String / Boolean )

String "String"
  = str:((StringPart / Identifier) _? )+ {return isConcat(str);}

Boolean "boolean"
  = val:("true" / "false") {return ['Boolean', (val === 'true')]}

StringPart "string"
  = '"' val:[^"]* '"' {return ['String', val.join('')]}

Duration "duration"
  = a:[0-9]+u:[a-z] {return ['Duration', parseInt(a,10), u]}

Integer "integer"
  = int:[0-9]+ {return ['Integer', parseInt(int.join(''),10)]}

__ "non-breaking whitespace"
  = [ \t]*

_ "whitespace"
  = [ \t\n\r]*
