{
  function durationUnit(u){
  	switch(u){
  		case 's' : return 'seconds';
  	}
  }
}

start
  = expr:(Expression _ )+ {return expr.map(e => e[0]); }

Expression
  = BackendDefinition

BackendDefinition "backend"
 = "backend" _ (name:[a-z]+) _ (propList:BackendPropertyList) { return {type:'BackendDeclaration', name:name.join(''), properties:propList} }


BackendPropertyList "backend property list"
 = "{" _ props:(SetBackendProperty _)+ "}" { return props.map(p => p[0]) }

SetBackendProperty "SET backend property"
 = (left:BackendPropertyName _ "=" _ right:Literal ";") {return [left, right] }

BackendPropertyName "backend property name"
  = name:("."[a-z_]*) {return name[1].join('')}

Literal "literal"
  = value:(Duration / Integer / String / Boolean)

Boolean "boolean"
  = val:("true" / "false") {return {type:'boolean', value:(val === 'true')}}

String "string"
  = '"' val:[^"]* '"' {return {type:'string', value:val.join('')}}

Duration "duration"
  = a:[0-9]+u:[a-z] {return {type:'duration', value:parseInt(a.join(''),10), unit:u}}

Integer "integer"
  = int:[0-9]+ {return {type:'int', value:parseInt(int.join(''),10)}}

_ "whitespace"
  = [ \t\n\r]*
